var documenterSearchIndex = {"docs":
[{"location":"apireference/#Documentation","page":"API Reference","title":"Documentation","text":"","category":"section"},{"location":"apireference/","page":"API Reference","title":"API Reference","text":"Modules = [QuanticsGrids]","category":"page"},{"location":"apireference/#QuanticsGrids.DiscretizedGrid","page":"API Reference","title":"QuanticsGrids.DiscretizedGrid","text":"The DiscretizedGrid struct represents a grid for discretized continuous data. This is used for data that is originally continuous, but has been discretized for computational purposes. The grid contains values at specific, equally spaced points, which represent discrete approximations of the original continuous data.\n\n\n\n\n\n","category":"type"},{"location":"apireference/#QuanticsGrids.InherentDiscreteGrid","page":"API Reference","title":"QuanticsGrids.InherentDiscreteGrid","text":"The InherentDiscreteGrid struct represents a grid for inherently discrete data. The grid contains values at specific, equally spaced points, but these values do not represent discretized versions of continuous data. Instead, they represent individual data points that are inherently discrete. The linear size of the mesh is base^R, where base defaults to 2.\n\n\n\n\n\n","category":"type"},{"location":"apireference/#QuanticsGrids.InherentDiscreteGrid-Union{Tuple{Int64}, Tuple{d}} where d","page":"API Reference","title":"QuanticsGrids.InherentDiscreteGrid","text":"Create a grid for inherently discrete data with origin at 1\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids._digit_at_index-Tuple{Any, Any}","page":"API Reference","title":"QuanticsGrids._digit_at_index","text":"index, position and the result are one-based.\n\nbase: base index: The integer to look at. position=1: Specify the position of the digit to look at. 1 is the most significant (most left) digit. numdigits=8: Specify the number of digits in the number index.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.deinterleave_dimensions-Tuple{Any, Any}","page":"API Reference","title":"QuanticsGrids.deinterleave_dimensions","text":"deinterleave_dimensions(digitlist, d)\n\nReverses the interleaving of bits, i.e. yields digitlists for each dimension from a long interleaved digitlist. Inverse of interleave_dimensions.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.fuse_dimensions-Tuple","page":"API Reference","title":"QuanticsGrids.fuse_dimensions","text":"fuse_dimensions(digitlists...)\n\nFuse d digitlists that represent a quantics index into a digitlist where each bit has dimension base^d. This fuses legs for different dimensions that have equal length scale (see QTCI paper).\n\nInverse of unfuse_dimensions.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.fused_to_interleaved-Union{Tuple{T}, Tuple{AbstractVector{T}, Any}} where T<:Integer","page":"API Reference","title":"QuanticsGrids.fused_to_interleaved","text":"Converrt a fused qunaitcs representation to an unfused quantics representation\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.grididx_to_origcoord-Tuple{QuanticsGrids.Grid{1}, Int64}","page":"API Reference","title":"QuanticsGrids.grididx_to_origcoord","text":"grid index => original coordinate\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.grididx_to_origcoord-Union{Tuple{d}, Tuple{QuanticsGrids.Grid{d}, Tuple{Vararg{Int64, d}}}} where d","page":"API Reference","title":"QuanticsGrids.grididx_to_origcoord","text":"grid index => original coordinate\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.grididx_to_quantics-Tuple{QuanticsGrids.Grid{1}, Int64}","page":"API Reference","title":"QuanticsGrids.grididx_to_quantics","text":"grid index => quantics\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.grididx_to_quantics-Union{Tuple{d}, Tuple{QuanticsGrids.Grid{d}, Tuple{Vararg{Int64, d}}}} where d","page":"API Reference","title":"QuanticsGrids.grididx_to_quantics","text":"grid index => quantics\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.index_to_quantics!-Tuple{Any, Integer}","page":"API Reference","title":"QuanticsGrids.index_to_quantics!","text":"function index_to_quantics!(digitlist, index::Integer; base::Integer=2)\n\ndigitlist     base-b representation (1d vector)\nbase           base for quantics (default: 2)\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.index_to_quantics-Tuple{Integer}","page":"API Reference","title":"QuanticsGrids.index_to_quantics","text":"index_to_quantics(index::Integer; numdigits=8, base::Integer=2)\n\nDoes the same as index_to_quantics! but returns a new vector.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.index_to_quantics_fused!-Union{Tuple{D}, Tuple{AbstractVector{<:Integer}, Tuple{Vararg{var\"#s12\", D}} where var\"#s12\"<:Integer}} where D","page":"API Reference","title":"QuanticsGrids.index_to_quantics_fused!","text":"index_to_quantics_fused!(digitlist::AbstractVector{<:Integer}, index::NTuple{D,<:Integer}; base::Integer=2) where {D}\n\nDoes the opposite of quantics_to_index_fused\n\nD\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.interleave_dimensions-Tuple","page":"API Reference","title":"QuanticsGrids.interleave_dimensions","text":"interleave_dimensions(digitlists...)\n\nInterleaves the indices of all digitlists into one long digitlist. Use this for quantics representation of multidimensional objects without fusing indices. Inverse of deinterleave_dimensions.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.interleaved_to_fused-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Integer","page":"API Reference","title":"QuanticsGrids.interleaved_to_fused","text":"Converrt a unfused qunaitcs representation to an fused quantics representation\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.origcoord_to_grididx-Union{Tuple{N}, Tuple{DiscretizedGrid, Tuple{Vararg{Float64, N}}}} where N","page":"API Reference","title":"QuanticsGrids.origcoord_to_grididx","text":"Convert a coordinate in the original coordinate system to the corresponding grid index\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.origcoord_to_grididx-Union{Tuple{N}, Tuple{InherentDiscreteGrid, Union{Int64, Tuple{Vararg{Int64, N}}}}} where N","page":"API Reference","title":"QuanticsGrids.origcoord_to_grididx","text":"Convert a coordinate in the original coordinate system to the corresponding grid index\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.origcoord_to_quantics-Union{Tuple{d}, Tuple{QuanticsGrids.Grid{d}, Any}} where d","page":"API Reference","title":"QuanticsGrids.origcoord_to_quantics","text":"original coordinate => quantics\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.quantics_to_grididx-Union{Tuple{d}, Tuple{QuanticsGrids.Grid{d}, Any}} where d","page":"API Reference","title":"QuanticsGrids.quantics_to_grididx","text":"quantics => grid index\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.quantics_to_index-Union{Tuple{AbstractVector{<:Integer}}, Tuple{d}} where d","page":"API Reference","title":"QuanticsGrids.quantics_to_index","text":"function quantics_to_index(\n    digitlist::AbstractVector{<:Integer};\n    base::Val{B}=Val(2), dims::Val{d}=Val(1),\n    unfoldingscheme::Symbol=:fused\n)::NTuple{d,Int} where {B, d}\n\nConvert a d-dimensional index from fused quantics representation to d Integers.\n\nbase           base for quantics (default: 2)\nd           number of dimensions\ndigitlist     base-b representation\nunfoldingscheme    Unfolding scheme (fused or interleaved)\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.quantics_to_index_fused-Union{Tuple{AbstractVector{<:Integer}}, Tuple{d}} where d","page":"API Reference","title":"QuanticsGrids.quantics_to_index_fused","text":"function quantics_to_index_fused(\n    digitlist::AbstractVector{<:Integer};\n    base::Val{B}=Val(2), dims::Val{d}=Val(1)\n)::NTuple{d,Int} where {B, d}\n\nConvert a d-dimensional index from fused quantics representation to d Integers.\n\nbase           base for quantics (default: 2)\nd           number of dimensions\ndigitlist     base-b representation\n\nSee also quantics_to_index.\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.quantics_to_origcoord-Union{Tuple{d}, Tuple{QuanticsGrids.Grid{d}, Any}} where d","page":"API Reference","title":"QuanticsGrids.quantics_to_origcoord","text":"quantics => original coordinate system\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.quanticsfunction-Union{Tuple{d}, Tuple{T}, Tuple{Type{T}, QuanticsGrids.Grid{d}, Function}} where {T, d}","page":"API Reference","title":"QuanticsGrids.quanticsfunction","text":"Make a wrapper function that takes a bitlist as input\n\n\n\n\n\n","category":"method"},{"location":"apireference/#QuanticsGrids.unfuse_dimensions-Tuple{Any, Any}","page":"API Reference","title":"QuanticsGrids.unfuse_dimensions","text":"unfuse_dimensions([base=Val(2)], digitlist, d)\n\nUnfuse up a fused digitlist with bits of dimension base^d into d digitlists where each bit has dimension base. Inverse of fuse_dimensions.\n\n\n\n\n\n","category":"method"},{"location":"#QuanticsGrids.jl-user-guide","page":"Home","title":"QuanticsGrids.jl user guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuanticsGrids","category":"page"}]
}
